#| label: setup
#| include: false
# Standard library imports
import os
import sys
from pathlib import Path
import logging
# Third-party library imports
import pandas as pd
from IPython.display import display, Image
from great_tables import GT
# Kedro specific imports
from kedro.framework.project import configure_project
from kedro.framework.session import KedroSession
from kedro.framework.startup import bootstrap_project
# --- Global Kedro Project Path Setup ---
# This tries to set the project path once.
# Assumes this setup chunk is in a .qmd file within the 'docs' directory.
# Adjust if your .qmd file running this setup is elsewhere relative to the project root.
try:
current_setup_chunk_dir = Path.cwd() # Typically dir of the .qmd file
if current_setup_chunk_dir.name == "docs":
PROJECT_ROOT_PATH = current_setup_chunk_dir.parent.resolve()
else:
# Assuming .qmd is at project root or some other logic is needed
PROJECT_ROOT_PATH = current_setup_chunk_dir.resolve()
# Bootstrap the project once
bootstrap_project(PROJECT_ROOT_PATH)
print(f"DEBUG: Kedro project bootstrapped using path: {PROJECT_ROOT_PATH}", file=sys.stderr)
except Exception as e:
PROJECT_ROOT_PATH = None # Indicate failure
print(f"ERROR: Initial Kedro Bootstrap Failed in setup chunk: {e}", file=sys.stderr)
# --- End Global Kedro Project Path Setup ---
def load_kedro_dataset(dataset_name: str):
"""
Loads a dataset from the Kedro catalog,
temporarily silencing kedro.io INFO logs during the load.
Returns the loaded data or an error DataFrame.
"""
if not PROJECT_ROOT_PATH:
return pd.DataFrame({'Error': ["Kedro project root not initialized in setup."]})
try:
with KedroSession.create(project_path=PROJECT_ROOT_PATH) as session:
context = session.load_context()
catalog = context.catalog
# Temporarily silence kedro.io logger
kedro_io_logger = logging.getLogger("kedro.io")
original_level = kedro_io_logger.getEffectiveLevel()
kedro_io_logger.setLevel(logging.WARNING)
data = catalog.load(dataset_name)
# Restore logger level
kedro_io_logger.setLevel(original_level)
return data
except Exception as e:
# For issues during load, print to console log and return an error DataFrame
print(f"ERROR loading Kedro dataset '{dataset_name}': {type(e).__name__} - {e}", file=sys.stderr)
return pd.DataFrame({'Error': [f"Failed to load dataset '{dataset_name}': {str(e)[:150]}..."]})
def display_kedro_table(dataset_name: str, rows: int = 5, title_prefix: str = "First 5 Rows of"):
"""
Loads a Kedro dataset, displays its head as a great_tables table,
and handles potential loading errors gracefully in the output.
"""
data_df = load_kedro_dataset(dataset_name)
table_title = f"{title_prefix} {dataset_name}"
if isinstance(data_df, pd.DataFrame) and 'Error' in data_df.columns and len(data_df) == 1 and data_df.iloc[0]['Error'].startswith("Failed to load"):
# This means load_kedro_dataset returned an error DataFrame
final_table = GT(data_df).tab_header(title=f"Error: {dataset_name}")
elif isinstance(data_df, pd.DataFrame):
final_table = GT(data_df.head(rows)).tab_header(title=table_title)
else:
# If data_df is not a DataFrame (e.g. an image or other object, or None from failed bootstrap)
error_msg = "Data is not a DataFrame or Kedro project not initialized."
if PROJECT_ROOT_PATH is None:
error_msg = "Kedro project root not initialized in setup chunk."
elif data_df is None: # Should be caught by the PROJECT_ROOT_PATH check or error df from load_kedro_dataset
error_msg = f"Failed to load or process dataset '{dataset_name}'."
final_table = GT(pd.DataFrame({'Status': [error_msg]})).tab_header(title=f"Status: {dataset_name}")
return final_table # Return the GT object for Quarto to render
print("DEBUG: Kedro helper functions defined in setup chunk.") # This goes to render console
print("DEBUG: Setup chunk executed (with logging module).")
#| eval: FALSE
#| include: FALSE
project_path = Path.cwd()
project_path
#| eval: FALSE
#| include: FALSE
project_path = Path.cwd()
project_path
View(PROJECT_ROOT_PATH)
