---
title: "My Document with Python + Kedro + Quarto"
author: "RobWiederstein"
date: today
---


```{python}
#| label: setup
#| include: false

# Standard library imports
import os
import sys                # <<< IMPORT SYS HERE
from pathlib import Path
import logging
import datetime           # <<< IMPORT DATETIME HERE

# --- ADDED FOR DEBUGGING CHUNK EXECUTION ---
print(f"DEBUG (setup chunk): SETUP CHUNK START @ {datetime.datetime.now()}", file=sys.stderr)
# ---

# Third-party library imports
import pandas as pd
from IPython.display import display, Image, Markdown
from great_tables import GT

# Kedro specific imports
from kedro.framework.session import KedroSession
from kedro.framework.startup import bootstrap_project

# --- Global Kedro Project Path Setup & Bootstrap ---
PROJECT_ROOT_PATH = None
INITIAL_BOOTSTRAP_ERROR = None # To store initial bootstrap error

try:
    current_qmd_dir = Path.cwd() 
    if current_qmd_dir.name == "docs" and (current_qmd_dir.parent / "pyproject.toml").exists():
        PROJECT_ROOT_PATH = current_qmd_dir.parent.resolve()
    elif (current_qmd_dir / "pyproject.toml").exists(): 
        PROJECT_ROOT_PATH = current_qmd_dir.resolve()
    else:
        # Fallback, though ideally one of the above should hit for your project structure
        PROJECT_ROOT_PATH = Path("/Users/rkw/Dropbox/coding/pyproj/spaceflights").resolve() 
        print(f"Warning (setup chunk): Using hardcoded fallback for PROJECT_ROOT_PATH: {PROJECT_ROOT_PATH}", file=sys.stderr)

    if PROJECT_ROOT_PATH and PROJECT_ROOT_PATH.exists():
        bootstrap_project(PROJECT_ROOT_PATH)
        print(f"DEBUG (setup chunk): Kedro project bootstrapped using path: {PROJECT_ROOT_PATH}", file=sys.stderr)
    else:
        INITIAL_BOOTSTRAP_ERROR = f"Kedro project root could not be determined from CWD {current_qmd_dir} or detected path {PROJECT_ROOT_PATH} does not exist."
        print(f"ERROR (setup chunk): {INITIAL_BOOTSTRAP_ERROR}", file=sys.stderr)
        PROJECT_ROOT_PATH = None 

except Exception as e:
    PROJECT_ROOT_PATH = None 
    INITIAL_BOOTSTRAP_ERROR = f"Initial Kedro Bootstrap Failed: {type(e).__name__} - {e}"
    print(f"ERROR (setup chunk): {INITIAL_BOOTSTRAP_ERROR}", file=sys.stderr)
# --- End Global Kedro Project Path Setup ---

def load_kedro_dataset(dataset_name: str):
    global INITIAL_BOOTSTRAP_ERROR 
    global PROJECT_ROOT_PATH

    if not PROJECT_ROOT_PATH: # Check if bootstrap failed
        return pd.DataFrame({'Error': [f"Kedro project not initialized: {INITIAL_BOOTSTRAP_ERROR  or 'Unknown reason'}"]})
    try:
        with KedroSession.create(project_path=PROJECT_ROOT_PATH) as session:
            context = session.load_context()
            catalog = context.catalog
            kedro_io_logger = logging.getLogger("kedro.io")
            original_level = kedro_io_logger.getEffectiveLevel()
            kedro_io_logger.setLevel(logging.WARNING)
            data = catalog.load(dataset_name)
            kedro_io_logger.setLevel(original_level)
            return data
    except Exception as e:
        print(f"ERROR (load_kedro_dataset): Loading '{dataset_name}': {type(e).__name__} - {e}", file=sys.stderr)
        return pd.DataFrame({'Error': [f"Failed to load dataset '{dataset_name}': {str(e)[:150]}..."]})

def display_kedro_table(dataset_name: str, rows: int = 5, title_prefix: str = "First 5 Rows of"):
    data_df = load_kedro_dataset(dataset_name)
    table_title = f"{title_prefix} {dataset_name}"
    if isinstance(data_df, pd.DataFrame) and 'Error' in data_df.columns and data_df.iloc[0]['Error'].startswith(("Failed to load", "Kedro project not initialized")):
        final_gt_object = GT(data_df).tab_header(title=f"Error Displaying: {dataset_name}")
    elif isinstance(data_df, pd.DataFrame):
        final_gt_object = GT(data_df.head(rows)).tab_header(title=table_title)
    else:
        error_msg = f"Could not load or display '{dataset_name}'. Data type: {type(data_df)}. Project Initialized: {PROJECT_ROOT_PATH is not None}"
        final_gt_object = GT(pd.DataFrame({'Status': [error_msg]}))
    return final_gt_object
```


# Introduction

This project ports the spaceflights tutorial from Kedro.  Its significance is that it builds a reproducible pipeline within a broadly accepted python framework.[@wilson_best_2014]  The Kedro framework envisions the use of Sphinx, the widely used Python documentation system.  However, the Sphinx default was changed to Quarto. 


# Datasets

## Companies

```{python}
#| label: tbl-companies-head
#| tbl-cap: "First 5 rows of the Companies dataset."
#| eval: true

display_kedro_table("companies")
```

## Reviews 

```{python}
#| label: tbl-reviews-head
#| tbl-cap: "First 5 rows of the Reviews dataset."
#| eval: true
display_kedro_table("reviews")
```

## Shuttles

```{python}
#| label: tbl-shuttles-head
#| tbl-cap: "First 5 rows of the Shuttles dataset."
#| eval: true
display_kedro_table("shuttles")
```

# Table

```{python}
#| label: tbl-model-input-head
#| tbl-cap: "First 5 rows of the Model Input Table"
#| eval: true
display_kedro_table("model_input_table")
```


# Results 

```{python}
#| label: fig-conf-matrix
#| fig-cap: "This is a nice figure."
#| fig-cap-location: bottom

import sys # For printing debug messages
from pathlib import Path
from IPython.display import Image, Markdown # Import Markdown for error messages

# This assumes PROJECT_ROOT_PATH is correctly defined in your 'setup' chunk
# and is accessible in the global scope of the Quarto Python kernel.
# If it's not, you might need to re-run the relevant part of your setup logic
# or ensure it's properly shared.

final_output = None

if 'PROJECT_ROOT_PATH' in globals() and PROJECT_ROOT_PATH:
    # This is the directory for the 'dummy_confusion_matrix.png' dataset in Kedro
    # It contains the versioned subdirectories.
    dataset_base_dir = PROJECT_ROOT_PATH / "data" / "08_reporting" / "dummy_confusion_matrix.png"
    image_actual_filename = "dummy_confusion_matrix.png" # The name of the file within each version folder

    print(f"DEBUG (fig-conf-matrix): Checking dataset base directory: {dataset_base_dir}", file=sys.stderr, flush = True)

    if dataset_base_dir.is_dir():
        # Get all subdirectories (these should be the version folders)
        version_subdirs = [d for d in dataset_base_dir.iterdir() if d.is_dir()]

        if version_subdirs:
            # Sort by name to find the latest (assuming timestamps are sortable, e.g., ISO format)
            latest_version_dir = max(version_subdirs, key=lambda d: d.name)
            dynamic_image_path = latest_version_dir / image_actual_filename
            
            print(f"DEBUG (fig-conf-matrix): Dynamically determined image path: {dynamic_image_path}", file=sys.stderr, flush = True)

            if dynamic_image_path.is_file():
                final_output = Image(filename=str(dynamic_image_path))
            else:
                error_msg = f"ERROR: Image file not found at dynamically determined path: {dynamic_image_path}"
                print(error_msg, file=sys.stderr, flush = True)
                final_output = Markdown(f"**{error_msg}**")
        else:
            error_msg = f"ERROR: No versioned subdirectories found in: {dataset_base_dir}"
            print(error_msg, file=sys.stderr, flush = True)
            final_output = Markdown(f"**{error_msg}**")
    else:
        error_msg = f"ERROR: Dataset base directory not found: {dataset_base_dir}"
        print(error_msg, file=sys.stderr, flush = True)
        final_output = Markdown(f"**{error_msg}**")
else:
    error_msg = "ERROR: Kedro 'PROJECT_ROOT_PATH' not found. Cannot locate image. Check setup chunk."
    print(error_msg, file=sys.stderr, flush = True)
    final_output = Markdown(f"**{error_msg}**")

if final_output:
    final_output # This ensures the Image or Markdown error is the last expression rendered
else:
    # Fallback if final_output somehow wasn't set
    Markdown("**Error: No output could be generated for the figure.**")
```

a great figure at [@fig-conf-matrix].

# References {.unnumbered}

:::{#refs}
:::
